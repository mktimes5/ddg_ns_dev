{#
/**
 * @file
 * Default theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 *
 * @ingroup themeable
 */
#}

{#
	work content fields
	{{ label }}
	{{ content.field_sub_title }}
	{{ content.field_hero_image }}
	{{ content.body }}
	{{ content.field_platform }}
	{{ content.field_techniques }}
	{{ content.field_work_url }}
	{{ content.field_work_year }}


	{{ content.field_mobile_script }}
	{{ content.field_tablet_image }}
	{{ content.field_mobile_image }}

	{{ content.field_desktop_title }}
  	{{ content.field_desktop_image }}
  	{{ content.field_descktop_description }}

#}
<article id="node-work">
  
	<section class="row work-header">
		<div class="hero-image large-12 columns" style="background-image:url('{{ file_url(node.field_hero_image.entity.fileuri) }}')">
	  		<h1 id="work-title">{{ label }}</h1>
		</div>
	</section>

	<section class="row work-body-section">

		<div class="large-9 small-12 columns blue-col-work-left-script">
			<div class="sub-title">
				<h2>{{ content.field_sub_title }}</h2>
			</div>
			<div class="work-body">
				{{ content.body }}
			</div>
		</div>

		<div class="large-3 small-11 columns blue-col-work-right-script">
			<div class="techs">
				<ul>
					<li>{{ content.field_platform }}</li>
					<li>{{ content.field_work_year }}</li>
					<li>{{ content.field_techniques }}</li>
				</ul>
			</div>
		</div>

	</section>

	<section class="row">

		{% if content.field_mobile_image %}
			<div class="large-12 columns work-mobile-section">
				<div class="row">


					<div class="mobile-script">
						<h2>Mobile Design</h2>
						{{ content.field_mobile_script }}

					</div>

					<div class="mobile-image">
						<div class="mob-col-1">
							{{ content.field_tablet_image }}
							{{ content.field_mobile_image }}
						</div>
						<div class="mob-col-2">
							{{ content.field_desktop_image }}
						</div>

					</div>

				</div>
			</div>
		{% endif %}
	</section>

	<section class="row work-visit">

		<div class="desktop-left-col">
			<!-- css macbook -->
			<div class="mac-wrap">

				<div class='pca-hold'>
					<div class='pca-main'>
						<div class='pca-inner'>
						</div>
					</div>
					<div class='pca-sub'>
						<div class='pca-top'></div>
						<div class='pca-mid'>
							<div class='pca-part'></div>
						</div>
						<div class='pca-bot'></div>
					</div>
				</div>
			</div>

			<div class="ipad-wrap">
				<div class='pca-hold'>
					  <div class='pca-main'>
						    <div class='pca-inner'>
							    </div><!-- 'pca-inner' -->
						  </div><!-- 'pca-main' -->
					  <div class='pca-sub'>
						    <div class='pca-top'></div>
						    <div class='pca-mid'>
							      <div class='pca-part'></div>
							    </div><!-- 'pca-mid' -->
						    <div class='pca-bot'></div>
						  </div><!-- 'pca-bot' -->
				</div><!-- 'pca-hold' -->
			</div>

		</div>
		<div class="desktop-right-col">
			<h3>Vist {{ label }}</h3>
			{{ content.field_work_url }}
		</div>


	</section>

</article>